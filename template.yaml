apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: golang-starter
  title: Go Application
  description: Create a Go repo with this template
  tags:
    - go
spec:
  type: service
  owner: engineering-services

  parameters:
    - title: Fill in template parameters
      required:
        - name
        - project_short_description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        project_short_description:
          title: Description
          type: string
          description: Description of the component
    - title: Choose owner and repo
      required:
        - access
      properties:
        access:
          title: Access
          type: string
          description: Who should have access to the repo.
          ui:autofocus: true
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose your cluster
      required:
        - gke
      properties:
        gke:
          title: Cluster
          type: string
          description: Which cluster will your application be deployed.
          ui:autofocus: true
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - Resource
            allowedType:
              - gke
        harbor:
          title: Repo
          type: string
          description: Which repo in harbor will the docker image stored.
          ui:autofocus: true
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - Resource
            allowedType:
              - harbor-repo

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:cookiecutter
      input:
        url: ./template
        values:
          name: '{{ parameters.name }}'
          project_short_description: '{{ parameters.project_short_description }}'
          access: 'BESTSELLER/{{ parameters.access }}'
          harbor: ''
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'This is {{ parameters.name }}'
        repoUrl: 'github.com?owner=BESTSELLER&repo={{parameters.name}}'
        access: 'BESTSELLER/{{ parameters.access }}'
        repoVisibility: 'private'
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'
  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'
